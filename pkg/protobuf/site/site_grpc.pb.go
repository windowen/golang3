// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: site/site.proto

package site

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "serverApi/pkg/protobuf/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SiteService_Login_FullMethodName                      = "/proto.SiteService/Login"
	SiteService_Register_FullMethodName                   = "/proto.SiteService/Register"
	SiteService_ModifyProfile_FullMethodName              = "/proto.SiteService/ModifyProfile"
	SiteService_ModifyLoginPassword_FullMethodName        = "/proto.SiteService/ModifyLoginPassword"
	SiteService_ModifyPaymentPassword_FullMethodName      = "/proto.SiteService/ModifyPaymentPassword"
	SiteService_Logout_FullMethodName                     = "/proto.SiteService/Logout"
	SiteService_SendValidationCode_FullMethodName         = "/proto.SiteService/SendValidationCode"
	SiteService_ForgetPassword_FullMethodName             = "/proto.SiteService/ForgetPassword"
	SiteService_GlobalAreas_FullMethodName                = "/proto.SiteService/GlobalAreas"
	SiteService_GetProfile_FullMethodName                 = "/proto.SiteService/GetProfile"
	SiteService_FindUserInfo_FullMethodName               = "/proto.SiteService/FindUserInfo"
	SiteService_FollowUser_FullMethodName                 = "/proto.SiteService/FollowUser"
	SiteService_FollowUnlockUser_FullMethodName           = "/proto.SiteService/FollowUnlockUser"
	SiteService_FollowFans_FullMethodName                 = "/proto.SiteService/FollowFans"
	SiteService_FollowFollowing_FullMethodName            = "/proto.SiteService/FollowFollowing"
	SiteService_FollowCount_FullMethodName                = "/proto.SiteService/FollowCount"
	SiteService_FollowCheck_FullMethodName                = "/proto.SiteService/FollowCheck"
	SiteService_RedPoint_FullMethodName                   = "/proto.SiteService/RedPoint"
	SiteService_ReadAll_FullMethodName                    = "/proto.SiteService/ReadAll"
	SiteService_MsgList_FullMethodName                    = "/proto.SiteService/MsgList"
	SiteService_MarkRead_FullMethodName                   = "/proto.SiteService/MarkRead"
	SiteService_SecurityAuthInfo_FullMethodName           = "/proto.SiteService/SecurityAuthInfo"
	SiteService_SecurityBinding_FullMethodName            = "/proto.SiteService/SecurityBinding"
	SiteService_SiteConfigs_FullMethodName                = "/proto.SiteService/SiteConfigs"
	SiteService_SiteBanner_FullMethodName                 = "/proto.SiteService/SiteBanner"
	SiteService_Rotating_FullMethodName                   = "/proto.SiteService/Rotating"
	SiteService_StartupImage_FullMethodName               = "/proto.SiteService/StartupImage"
	SiteService_ClearTransactionMsgReadAll_FullMethodName = "/proto.SiteService/ClearTransactionMsgReadAll"
	SiteService_MsgSummary_FullMethodName                 = "/proto.SiteService/MsgSummary"
	SiteService_Stay_FullMethodName                       = "/proto.SiteService/Stay"
	SiteService_BannerClick_FullMethodName                = "/proto.SiteService/BannerClick"
)

// SiteServiceClient is the client API for SiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiteServiceClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*common.Empty, error)
	ModifyProfile(ctx context.Context, in *ModifyProfileReq, opts ...grpc.CallOption) (*common.Empty, error)
	ModifyLoginPassword(ctx context.Context, in *ModifyLoginPasswordReq, opts ...grpc.CallOption) (*common.Empty, error)
	ModifyPaymentPassword(ctx context.Context, in *ModifyPaymentReq, opts ...grpc.CallOption) (*common.Empty, error)
	Logout(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error)
	SendValidationCode(ctx context.Context, in *SendValidationReq, opts ...grpc.CallOption) (*common.Empty, error)
	ForgetPassword(ctx context.Context, in *ForgetPasswordReq, opts ...grpc.CallOption) (*common.Empty, error)
	GlobalAreas(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GlobalAreaResp, error)
	GetProfile(ctx context.Context, in *ProfileReq, opts ...grpc.CallOption) (*ProfileResp, error)
	FindUserInfo(ctx context.Context, in *FindUserInfoReq, opts ...grpc.CallOption) (*FindUserInfoResp, error)
	FollowUser(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*common.Empty, error)
	FollowUnlockUser(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*common.Empty, error)
	FollowFans(ctx context.Context, in *FollowsReq, opts ...grpc.CallOption) (*FollowsResp, error)
	FollowFollowing(ctx context.Context, in *FollowsReq, opts ...grpc.CallOption) (*FollowsResp, error)
	FollowCount(ctx context.Context, in *FollowCountReq, opts ...grpc.CallOption) (*FollowCountResp, error)
	FollowCheck(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowCheckResp, error)
	RedPoint(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*RedPointResp, error)
	ReadAll(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error)
	MsgList(ctx context.Context, in *MsgListReq, opts ...grpc.CallOption) (*MsgListResp, error)
	MarkRead(ctx context.Context, in *MarkReadReq, opts ...grpc.CallOption) (*common.Empty, error)
	SecurityAuthInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*SecurityAuthInfoResp, error)
	SecurityBinding(ctx context.Context, in *SecurityBindingReq, opts ...grpc.CallOption) (*common.Empty, error)
	SiteConfigs(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*SiteConfigsResp, error)
	SiteBanner(ctx context.Context, in *SiteBannerReq, opts ...grpc.CallOption) (*SiteBannerResp, error)
	Rotating(ctx context.Context, in *RotatingReq, opts ...grpc.CallOption) (*RotatingResp, error)
	StartupImage(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*StartupImageResp, error)
	ClearTransactionMsgReadAll(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error)
	MsgSummary(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*MsgSummaryResp, error)
	Stay(ctx context.Context, in *PageStayReq, opts ...grpc.CallOption) (*common.Empty, error)
	BannerClick(ctx context.Context, in *BannerClickReq, opts ...grpc.CallOption) (*common.Empty, error)
}

type siteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiteServiceClient(cc grpc.ClientConnInterface) SiteServiceClient {
	return &siteServiceClient{cc}
}

func (c *siteServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, SiteService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) ModifyProfile(ctx context.Context, in *ModifyProfileReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_ModifyProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) ModifyLoginPassword(ctx context.Context, in *ModifyLoginPasswordReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_ModifyLoginPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) ModifyPaymentPassword(ctx context.Context, in *ModifyPaymentReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_ModifyPaymentPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) Logout(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SendValidationCode(ctx context.Context, in *SendValidationReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_SendValidationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) ForgetPassword(ctx context.Context, in *ForgetPasswordReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_ForgetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) GlobalAreas(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GlobalAreaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalAreaResp)
	err := c.cc.Invoke(ctx, SiteService_GlobalAreas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) GetProfile(ctx context.Context, in *ProfileReq, opts ...grpc.CallOption) (*ProfileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfileResp)
	err := c.cc.Invoke(ctx, SiteService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) FindUserInfo(ctx context.Context, in *FindUserInfoReq, opts ...grpc.CallOption) (*FindUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserInfoResp)
	err := c.cc.Invoke(ctx, SiteService_FindUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) FollowUser(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_FollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) FollowUnlockUser(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_FollowUnlockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) FollowFans(ctx context.Context, in *FollowsReq, opts ...grpc.CallOption) (*FollowsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowsResp)
	err := c.cc.Invoke(ctx, SiteService_FollowFans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) FollowFollowing(ctx context.Context, in *FollowsReq, opts ...grpc.CallOption) (*FollowsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowsResp)
	err := c.cc.Invoke(ctx, SiteService_FollowFollowing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) FollowCount(ctx context.Context, in *FollowCountReq, opts ...grpc.CallOption) (*FollowCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowCountResp)
	err := c.cc.Invoke(ctx, SiteService_FollowCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) FollowCheck(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowCheckResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowCheckResp)
	err := c.cc.Invoke(ctx, SiteService_FollowCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) RedPoint(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*RedPointResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedPointResp)
	err := c.cc.Invoke(ctx, SiteService_RedPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) ReadAll(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_ReadAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) MsgList(ctx context.Context, in *MsgListReq, opts ...grpc.CallOption) (*MsgListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgListResp)
	err := c.cc.Invoke(ctx, SiteService_MsgList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) MarkRead(ctx context.Context, in *MarkReadReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_MarkRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SecurityAuthInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*SecurityAuthInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityAuthInfoResp)
	err := c.cc.Invoke(ctx, SiteService_SecurityAuthInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SecurityBinding(ctx context.Context, in *SecurityBindingReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_SecurityBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SiteConfigs(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*SiteConfigsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SiteConfigsResp)
	err := c.cc.Invoke(ctx, SiteService_SiteConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SiteBanner(ctx context.Context, in *SiteBannerReq, opts ...grpc.CallOption) (*SiteBannerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SiteBannerResp)
	err := c.cc.Invoke(ctx, SiteService_SiteBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) Rotating(ctx context.Context, in *RotatingReq, opts ...grpc.CallOption) (*RotatingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotatingResp)
	err := c.cc.Invoke(ctx, SiteService_Rotating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) StartupImage(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*StartupImageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartupImageResp)
	err := c.cc.Invoke(ctx, SiteService_StartupImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) ClearTransactionMsgReadAll(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_ClearTransactionMsgReadAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) MsgSummary(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*MsgSummaryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgSummaryResp)
	err := c.cc.Invoke(ctx, SiteService_MsgSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) Stay(ctx context.Context, in *PageStayReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_Stay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) BannerClick(ctx context.Context, in *BannerClickReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SiteService_BannerClick_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteServiceServer is the server API for SiteService service.
// All implementations must embed UnimplementedSiteServiceServer
// for forward compatibility.
type SiteServiceServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Register(context.Context, *RegisterReq) (*common.Empty, error)
	ModifyProfile(context.Context, *ModifyProfileReq) (*common.Empty, error)
	ModifyLoginPassword(context.Context, *ModifyLoginPasswordReq) (*common.Empty, error)
	ModifyPaymentPassword(context.Context, *ModifyPaymentReq) (*common.Empty, error)
	Logout(context.Context, *common.Empty) (*common.Empty, error)
	SendValidationCode(context.Context, *SendValidationReq) (*common.Empty, error)
	ForgetPassword(context.Context, *ForgetPasswordReq) (*common.Empty, error)
	GlobalAreas(context.Context, *common.Empty) (*GlobalAreaResp, error)
	GetProfile(context.Context, *ProfileReq) (*ProfileResp, error)
	FindUserInfo(context.Context, *FindUserInfoReq) (*FindUserInfoResp, error)
	FollowUser(context.Context, *FollowReq) (*common.Empty, error)
	FollowUnlockUser(context.Context, *FollowReq) (*common.Empty, error)
	FollowFans(context.Context, *FollowsReq) (*FollowsResp, error)
	FollowFollowing(context.Context, *FollowsReq) (*FollowsResp, error)
	FollowCount(context.Context, *FollowCountReq) (*FollowCountResp, error)
	FollowCheck(context.Context, *FollowReq) (*FollowCheckResp, error)
	RedPoint(context.Context, *common.Empty) (*RedPointResp, error)
	ReadAll(context.Context, *common.Empty) (*common.Empty, error)
	MsgList(context.Context, *MsgListReq) (*MsgListResp, error)
	MarkRead(context.Context, *MarkReadReq) (*common.Empty, error)
	SecurityAuthInfo(context.Context, *common.Empty) (*SecurityAuthInfoResp, error)
	SecurityBinding(context.Context, *SecurityBindingReq) (*common.Empty, error)
	SiteConfigs(context.Context, *common.Empty) (*SiteConfigsResp, error)
	SiteBanner(context.Context, *SiteBannerReq) (*SiteBannerResp, error)
	Rotating(context.Context, *RotatingReq) (*RotatingResp, error)
	StartupImage(context.Context, *common.Empty) (*StartupImageResp, error)
	ClearTransactionMsgReadAll(context.Context, *common.Empty) (*common.Empty, error)
	MsgSummary(context.Context, *common.Empty) (*MsgSummaryResp, error)
	Stay(context.Context, *PageStayReq) (*common.Empty, error)
	BannerClick(context.Context, *BannerClickReq) (*common.Empty, error)
	mustEmbedUnimplementedSiteServiceServer()
}

// UnimplementedSiteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSiteServiceServer struct{}

func (UnimplementedSiteServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSiteServiceServer) Register(context.Context, *RegisterReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSiteServiceServer) ModifyProfile(context.Context, *ModifyProfileReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyProfile not implemented")
}
func (UnimplementedSiteServiceServer) ModifyLoginPassword(context.Context, *ModifyLoginPasswordReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyLoginPassword not implemented")
}
func (UnimplementedSiteServiceServer) ModifyPaymentPassword(context.Context, *ModifyPaymentReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPaymentPassword not implemented")
}
func (UnimplementedSiteServiceServer) Logout(context.Context, *common.Empty) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSiteServiceServer) SendValidationCode(context.Context, *SendValidationReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendValidationCode not implemented")
}
func (UnimplementedSiteServiceServer) ForgetPassword(context.Context, *ForgetPasswordReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetPassword not implemented")
}
func (UnimplementedSiteServiceServer) GlobalAreas(context.Context, *common.Empty) (*GlobalAreaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalAreas not implemented")
}
func (UnimplementedSiteServiceServer) GetProfile(context.Context, *ProfileReq) (*ProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedSiteServiceServer) FindUserInfo(context.Context, *FindUserInfoReq) (*FindUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserInfo not implemented")
}
func (UnimplementedSiteServiceServer) FollowUser(context.Context, *FollowReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedSiteServiceServer) FollowUnlockUser(context.Context, *FollowReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUnlockUser not implemented")
}
func (UnimplementedSiteServiceServer) FollowFans(context.Context, *FollowsReq) (*FollowsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowFans not implemented")
}
func (UnimplementedSiteServiceServer) FollowFollowing(context.Context, *FollowsReq) (*FollowsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowFollowing not implemented")
}
func (UnimplementedSiteServiceServer) FollowCount(context.Context, *FollowCountReq) (*FollowCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowCount not implemented")
}
func (UnimplementedSiteServiceServer) FollowCheck(context.Context, *FollowReq) (*FollowCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowCheck not implemented")
}
func (UnimplementedSiteServiceServer) RedPoint(context.Context, *common.Empty) (*RedPointResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPoint not implemented")
}
func (UnimplementedSiteServiceServer) ReadAll(context.Context, *common.Empty) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (UnimplementedSiteServiceServer) MsgList(context.Context, *MsgListReq) (*MsgListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgList not implemented")
}
func (UnimplementedSiteServiceServer) MarkRead(context.Context, *MarkReadReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkRead not implemented")
}
func (UnimplementedSiteServiceServer) SecurityAuthInfo(context.Context, *common.Empty) (*SecurityAuthInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityAuthInfo not implemented")
}
func (UnimplementedSiteServiceServer) SecurityBinding(context.Context, *SecurityBindingReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityBinding not implemented")
}
func (UnimplementedSiteServiceServer) SiteConfigs(context.Context, *common.Empty) (*SiteConfigsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiteConfigs not implemented")
}
func (UnimplementedSiteServiceServer) SiteBanner(context.Context, *SiteBannerReq) (*SiteBannerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiteBanner not implemented")
}
func (UnimplementedSiteServiceServer) Rotating(context.Context, *RotatingReq) (*RotatingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rotating not implemented")
}
func (UnimplementedSiteServiceServer) StartupImage(context.Context, *common.Empty) (*StartupImageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartupImage not implemented")
}
func (UnimplementedSiteServiceServer) ClearTransactionMsgReadAll(context.Context, *common.Empty) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearTransactionMsgReadAll not implemented")
}
func (UnimplementedSiteServiceServer) MsgSummary(context.Context, *common.Empty) (*MsgSummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgSummary not implemented")
}
func (UnimplementedSiteServiceServer) Stay(context.Context, *PageStayReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stay not implemented")
}
func (UnimplementedSiteServiceServer) BannerClick(context.Context, *BannerClickReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannerClick not implemented")
}
func (UnimplementedSiteServiceServer) mustEmbedUnimplementedSiteServiceServer() {}
func (UnimplementedSiteServiceServer) testEmbeddedByValue()                     {}

// UnsafeSiteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiteServiceServer will
// result in compilation errors.
type UnsafeSiteServiceServer interface {
	mustEmbedUnimplementedSiteServiceServer()
}

func RegisterSiteServiceServer(s grpc.ServiceRegistrar, srv SiteServiceServer) {
	// If the following call pancis, it indicates UnimplementedSiteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SiteService_ServiceDesc, srv)
}

func _SiteService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_ModifyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).ModifyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_ModifyProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).ModifyProfile(ctx, req.(*ModifyProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_ModifyLoginPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyLoginPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).ModifyLoginPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_ModifyLoginPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).ModifyLoginPassword(ctx, req.(*ModifyLoginPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_ModifyPaymentPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).ModifyPaymentPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_ModifyPaymentPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).ModifyPaymentPassword(ctx, req.(*ModifyPaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).Logout(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SendValidationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendValidationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SendValidationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_SendValidationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SendValidationCode(ctx, req.(*SendValidationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_ForgetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).ForgetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_ForgetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).ForgetPassword(ctx, req.(*ForgetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_GlobalAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).GlobalAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_GlobalAreas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).GlobalAreas(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).GetProfile(ctx, req.(*ProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_FindUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).FindUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_FindUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).FindUserInfo(ctx, req.(*FindUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).FollowUser(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_FollowUnlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).FollowUnlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_FollowUnlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).FollowUnlockUser(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_FollowFans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).FollowFans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_FollowFans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).FollowFans(ctx, req.(*FollowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_FollowFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).FollowFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_FollowFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).FollowFollowing(ctx, req.(*FollowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_FollowCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).FollowCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_FollowCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).FollowCount(ctx, req.(*FollowCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_FollowCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).FollowCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_FollowCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).FollowCheck(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_RedPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).RedPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_RedPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).RedPoint(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_ReadAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).ReadAll(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_MsgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).MsgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_MsgList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).MsgList(ctx, req.(*MsgListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_MarkRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).MarkRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_MarkRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).MarkRead(ctx, req.(*MarkReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SecurityAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SecurityAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_SecurityAuthInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SecurityAuthInfo(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SecurityBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SecurityBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_SecurityBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SecurityBinding(ctx, req.(*SecurityBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SiteConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SiteConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_SiteConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SiteConfigs(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SiteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteBannerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SiteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_SiteBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SiteBanner(ctx, req.(*SiteBannerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_Rotating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotatingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).Rotating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_Rotating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).Rotating(ctx, req.(*RotatingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_StartupImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).StartupImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_StartupImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).StartupImage(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_ClearTransactionMsgReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).ClearTransactionMsgReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_ClearTransactionMsgReadAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).ClearTransactionMsgReadAll(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_MsgSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).MsgSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_MsgSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).MsgSummary(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_Stay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageStayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).Stay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_Stay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).Stay(ctx, req.(*PageStayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_BannerClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerClickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).BannerClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteService_BannerClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).BannerClick(ctx, req.(*BannerClickReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SiteService_ServiceDesc is the grpc.ServiceDesc for SiteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SiteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SiteService",
	HandlerType: (*SiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _SiteService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _SiteService_Register_Handler,
		},
		{
			MethodName: "ModifyProfile",
			Handler:    _SiteService_ModifyProfile_Handler,
		},
		{
			MethodName: "ModifyLoginPassword",
			Handler:    _SiteService_ModifyLoginPassword_Handler,
		},
		{
			MethodName: "ModifyPaymentPassword",
			Handler:    _SiteService_ModifyPaymentPassword_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SiteService_Logout_Handler,
		},
		{
			MethodName: "SendValidationCode",
			Handler:    _SiteService_SendValidationCode_Handler,
		},
		{
			MethodName: "ForgetPassword",
			Handler:    _SiteService_ForgetPassword_Handler,
		},
		{
			MethodName: "GlobalAreas",
			Handler:    _SiteService_GlobalAreas_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _SiteService_GetProfile_Handler,
		},
		{
			MethodName: "FindUserInfo",
			Handler:    _SiteService_FindUserInfo_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _SiteService_FollowUser_Handler,
		},
		{
			MethodName: "FollowUnlockUser",
			Handler:    _SiteService_FollowUnlockUser_Handler,
		},
		{
			MethodName: "FollowFans",
			Handler:    _SiteService_FollowFans_Handler,
		},
		{
			MethodName: "FollowFollowing",
			Handler:    _SiteService_FollowFollowing_Handler,
		},
		{
			MethodName: "FollowCount",
			Handler:    _SiteService_FollowCount_Handler,
		},
		{
			MethodName: "FollowCheck",
			Handler:    _SiteService_FollowCheck_Handler,
		},
		{
			MethodName: "RedPoint",
			Handler:    _SiteService_RedPoint_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _SiteService_ReadAll_Handler,
		},
		{
			MethodName: "MsgList",
			Handler:    _SiteService_MsgList_Handler,
		},
		{
			MethodName: "MarkRead",
			Handler:    _SiteService_MarkRead_Handler,
		},
		{
			MethodName: "SecurityAuthInfo",
			Handler:    _SiteService_SecurityAuthInfo_Handler,
		},
		{
			MethodName: "SecurityBinding",
			Handler:    _SiteService_SecurityBinding_Handler,
		},
		{
			MethodName: "SiteConfigs",
			Handler:    _SiteService_SiteConfigs_Handler,
		},
		{
			MethodName: "SiteBanner",
			Handler:    _SiteService_SiteBanner_Handler,
		},
		{
			MethodName: "Rotating",
			Handler:    _SiteService_Rotating_Handler,
		},
		{
			MethodName: "StartupImage",
			Handler:    _SiteService_StartupImage_Handler,
		},
		{
			MethodName: "ClearTransactionMsgReadAll",
			Handler:    _SiteService_ClearTransactionMsgReadAll_Handler,
		},
		{
			MethodName: "MsgSummary",
			Handler:    _SiteService_MsgSummary_Handler,
		},
		{
			MethodName: "Stay",
			Handler:    _SiteService_Stay_Handler,
		},
		{
			MethodName: "BannerClick",
			Handler:    _SiteService_BannerClick_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "site/site.proto",
}
