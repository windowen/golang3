// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.5.1
// source: live/live.proto

package live

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "serverApi/pkg/protobuf/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LiveServer_ChatCallBack_FullMethodName        = "/proto.LiveServer/ChatCallBack"
	LiveServer_CreateChatRooms_FullMethodName     = "/proto.LiveServer/CreateChatRooms"
	LiveServer_CreateUser_FullMethodName          = "/proto.LiveServer/CreateUser"
	LiveServer_JoinRoom_FullMethodName            = "/proto.LiveServer/JoinRoom"
	LiveServer_SendGift_FullMethodName            = "/proto.LiveServer/SendGift"
	LiveServer_SendMess_FullMethodName            = "/proto.LiveServer/SendMess"
	LiveServer_ToggleLike_FullMethodName          = "/proto.LiveServer/ToggleLike"
	LiveServer_LeaveRoom_FullMethodName           = "/proto.LiveServer/LeaveRoom"
	LiveServer_FollowUser_FullMethodName          = "/proto.LiveServer/FollowUser"
	LiveServer_FindLiveRoomInfo_FullMethodName    = "/proto.LiveServer/FindLiveRoomInfo"
	LiveServer_RoomStartBroadcast_FullMethodName  = "/proto.LiveServer/RoomStartBroadcast"
	LiveServer_RoomListMute_FullMethodName        = "/proto.LiveServer/RoomListMute"
	LiveServer_RoomCreateMute_FullMethodName      = "/proto.LiveServer/RoomCreateMute"
	LiveServer_RoomCancelMute_FullMethodName      = "/proto.LiveServer/RoomCancelMute"
	LiveServer_RoomListKickOut_FullMethodName     = "/proto.LiveServer/RoomListKickOut"
	LiveServer_RoomCreateKickOut_FullMethodName   = "/proto.LiveServer/RoomCreateKickOut"
	LiveServer_RoomCancelKickOut_FullMethodName   = "/proto.LiveServer/RoomCancelKickOut"
	LiveServer_RoomListBlacklist_FullMethodName   = "/proto.LiveServer/RoomListBlacklist"
	LiveServer_RoomCreateBlacklist_FullMethodName = "/proto.LiveServer/RoomCreateBlacklist"
	LiveServer_RoomCancelBlacklist_FullMethodName = "/proto.LiveServer/RoomCancelBlacklist"
	LiveServer_RoomCloseBroadcast_FullMethodName  = "/proto.LiveServer/RoomCloseBroadcast"
	LiveServer_GmCloseBroadcast_FullMethodName    = "/proto.LiveServer/GmCloseBroadcast"
	LiveServer_JoinLiveRoom_FullMethodName        = "/proto.LiveServer/JoinLiveRoom"
	LiveServer_QuitLiveRoom_FullMethodName        = "/proto.LiveServer/QuitLiveRoom"
	LiveServer_ListLiveRooms_FullMethodName       = "/proto.LiveServer/ListLiveRooms"
	LiveServer_SearchAnchor_FullMethodName        = "/proto.LiveServer/SearchAnchor"
	LiveServer_LiveRoomsDetails_FullMethodName    = "/proto.LiveServer/LiveRoomsDetails"
)

// LiveServerClient is the client API for LiveServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveServerClient interface {
	// im
	ChatCallBack(ctx context.Context, in *ChatCallBackReq, opts ...grpc.CallOption) (*ChatCallBackResp, error)
	CreateChatRooms(ctx context.Context, in *CreateChatRoomReq, opts ...grpc.CallOption) (*CreateChatRoomResp, error)
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
	// chatroom
	JoinRoom(ctx context.Context, in *JoinRoomReq, opts ...grpc.CallOption) (*JoinRoomResp, error)
	SendGift(ctx context.Context, in *SendGiftReq, opts ...grpc.CallOption) (*SendGiftResp, error)
	SendMess(ctx context.Context, in *SendMessReq, opts ...grpc.CallOption) (*SendMessResp, error)
	ToggleLike(ctx context.Context, in *ToggleLikeReq, opts ...grpc.CallOption) (*ToggleLikeResp, error)
	LeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...grpc.CallOption) (*LeaveRoomResp, error)
	FollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*FollowUserResp, error)
	// 主播
	FindLiveRoomInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*LiveRoomsDetailsResp, error)
	RoomStartBroadcast(ctx context.Context, in *RoomStartBroadcastReq, opts ...grpc.CallOption) (*common.Empty, error)
	RoomListMute(ctx context.Context, in *RoomOpListReq, opts ...grpc.CallOption) (*RoomOpListResp, error)
	RoomCreateMute(ctx context.Context, in *RoomOpCreateReq, opts ...grpc.CallOption) (*common.Empty, error)
	RoomCancelMute(ctx context.Context, in *RoomOpCancelReq, opts ...grpc.CallOption) (*common.Empty, error)
	RoomListKickOut(ctx context.Context, in *RoomOpListReq, opts ...grpc.CallOption) (*RoomOpListResp, error)
	RoomCreateKickOut(ctx context.Context, in *RoomOpCreateReq, opts ...grpc.CallOption) (*common.Empty, error)
	RoomCancelKickOut(ctx context.Context, in *RoomOpCancelReq, opts ...grpc.CallOption) (*common.Empty, error)
	RoomListBlacklist(ctx context.Context, in *RoomOpListReq, opts ...grpc.CallOption) (*RoomOpListResp, error)
	RoomCreateBlacklist(ctx context.Context, in *RoomOpCreateReq, opts ...grpc.CallOption) (*common.Empty, error)
	RoomCancelBlacklist(ctx context.Context, in *RoomOpCancelReq, opts ...grpc.CallOption) (*common.Empty, error)
	RoomCloseBroadcast(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*CloseBroadcastResp, error)
	GmCloseBroadcast(ctx context.Context, in *RoomIdReq, opts ...grpc.CallOption) (*common.Empty, error)
	// 用户
	JoinLiveRoom(ctx context.Context, in *JoinLiveRoomReq, opts ...grpc.CallOption) (*JoinLiveRoomResp, error)
	QuitLiveRoom(ctx context.Context, in *RoomIdReq, opts ...grpc.CallOption) (*common.Empty, error)
	ListLiveRooms(ctx context.Context, in *ListLiveRoomsReq, opts ...grpc.CallOption) (*ListLiveRoomsResp, error)
	SearchAnchor(ctx context.Context, in *SearchAnchorReq, opts ...grpc.CallOption) (*SearchAnchorResp, error)
	LiveRoomsDetails(ctx context.Context, in *LiveRoomsDetailsReq, opts ...grpc.CallOption) (*LiveRoomsDetailsResp, error)
}

type liveServerClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveServerClient(cc grpc.ClientConnInterface) LiveServerClient {
	return &liveServerClient{cc}
}

func (c *liveServerClient) ChatCallBack(ctx context.Context, in *ChatCallBackReq, opts ...grpc.CallOption) (*ChatCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatCallBackResp)
	err := c.cc.Invoke(ctx, LiveServer_ChatCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) CreateChatRooms(ctx context.Context, in *CreateChatRoomReq, opts ...grpc.CallOption) (*CreateChatRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatRoomResp)
	err := c.cc.Invoke(ctx, LiveServer_CreateChatRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResp)
	err := c.cc.Invoke(ctx, LiveServer_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) JoinRoom(ctx context.Context, in *JoinRoomReq, opts ...grpc.CallOption) (*JoinRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomResp)
	err := c.cc.Invoke(ctx, LiveServer_JoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) SendGift(ctx context.Context, in *SendGiftReq, opts ...grpc.CallOption) (*SendGiftResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendGiftResp)
	err := c.cc.Invoke(ctx, LiveServer_SendGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) SendMess(ctx context.Context, in *SendMessReq, opts ...grpc.CallOption) (*SendMessResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessResp)
	err := c.cc.Invoke(ctx, LiveServer_SendMess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) ToggleLike(ctx context.Context, in *ToggleLikeReq, opts ...grpc.CallOption) (*ToggleLikeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleLikeResp)
	err := c.cc.Invoke(ctx, LiveServer_ToggleLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) LeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...grpc.CallOption) (*LeaveRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveRoomResp)
	err := c.cc.Invoke(ctx, LiveServer_LeaveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) FollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*FollowUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowUserResp)
	err := c.cc.Invoke(ctx, LiveServer_FollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) FindLiveRoomInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*LiveRoomsDetailsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LiveRoomsDetailsResp)
	err := c.cc.Invoke(ctx, LiveServer_FindLiveRoomInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomStartBroadcast(ctx context.Context, in *RoomStartBroadcastReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_RoomStartBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomListMute(ctx context.Context, in *RoomOpListReq, opts ...grpc.CallOption) (*RoomOpListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomOpListResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomListMute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomCreateMute(ctx context.Context, in *RoomOpCreateReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_RoomCreateMute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomCancelMute(ctx context.Context, in *RoomOpCancelReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_RoomCancelMute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomListKickOut(ctx context.Context, in *RoomOpListReq, opts ...grpc.CallOption) (*RoomOpListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomOpListResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomListKickOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomCreateKickOut(ctx context.Context, in *RoomOpCreateReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_RoomCreateKickOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomCancelKickOut(ctx context.Context, in *RoomOpCancelReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_RoomCancelKickOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomListBlacklist(ctx context.Context, in *RoomOpListReq, opts ...grpc.CallOption) (*RoomOpListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomOpListResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomListBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomCreateBlacklist(ctx context.Context, in *RoomOpCreateReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_RoomCreateBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomCancelBlacklist(ctx context.Context, in *RoomOpCancelReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_RoomCancelBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomCloseBroadcast(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*CloseBroadcastResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseBroadcastResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomCloseBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) GmCloseBroadcast(ctx context.Context, in *RoomIdReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_GmCloseBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) JoinLiveRoom(ctx context.Context, in *JoinLiveRoomReq, opts ...grpc.CallOption) (*JoinLiveRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinLiveRoomResp)
	err := c.cc.Invoke(ctx, LiveServer_JoinLiveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) QuitLiveRoom(ctx context.Context, in *RoomIdReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_QuitLiveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) ListLiveRooms(ctx context.Context, in *ListLiveRoomsReq, opts ...grpc.CallOption) (*ListLiveRoomsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLiveRoomsResp)
	err := c.cc.Invoke(ctx, LiveServer_ListLiveRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) SearchAnchor(ctx context.Context, in *SearchAnchorReq, opts ...grpc.CallOption) (*SearchAnchorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAnchorResp)
	err := c.cc.Invoke(ctx, LiveServer_SearchAnchor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) LiveRoomsDetails(ctx context.Context, in *LiveRoomsDetailsReq, opts ...grpc.CallOption) (*LiveRoomsDetailsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LiveRoomsDetailsResp)
	err := c.cc.Invoke(ctx, LiveServer_LiveRoomsDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveServerServer is the server API for LiveServer service.
// All implementations must embed UnimplementedLiveServerServer
// for forward compatibility
type LiveServerServer interface {
	// im
	ChatCallBack(context.Context, *ChatCallBackReq) (*ChatCallBackResp, error)
	CreateChatRooms(context.Context, *CreateChatRoomReq) (*CreateChatRoomResp, error)
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	// chatroom
	JoinRoom(context.Context, *JoinRoomReq) (*JoinRoomResp, error)
	SendGift(context.Context, *SendGiftReq) (*SendGiftResp, error)
	SendMess(context.Context, *SendMessReq) (*SendMessResp, error)
	ToggleLike(context.Context, *ToggleLikeReq) (*ToggleLikeResp, error)
	LeaveRoom(context.Context, *LeaveRoomReq) (*LeaveRoomResp, error)
	FollowUser(context.Context, *FollowUserReq) (*FollowUserResp, error)
	// 主播
	FindLiveRoomInfo(context.Context, *common.Empty) (*LiveRoomsDetailsResp, error)
	RoomStartBroadcast(context.Context, *RoomStartBroadcastReq) (*common.Empty, error)
	RoomListMute(context.Context, *RoomOpListReq) (*RoomOpListResp, error)
	RoomCreateMute(context.Context, *RoomOpCreateReq) (*common.Empty, error)
	RoomCancelMute(context.Context, *RoomOpCancelReq) (*common.Empty, error)
	RoomListKickOut(context.Context, *RoomOpListReq) (*RoomOpListResp, error)
	RoomCreateKickOut(context.Context, *RoomOpCreateReq) (*common.Empty, error)
	RoomCancelKickOut(context.Context, *RoomOpCancelReq) (*common.Empty, error)
	RoomListBlacklist(context.Context, *RoomOpListReq) (*RoomOpListResp, error)
	RoomCreateBlacklist(context.Context, *RoomOpCreateReq) (*common.Empty, error)
	RoomCancelBlacklist(context.Context, *RoomOpCancelReq) (*common.Empty, error)
	RoomCloseBroadcast(context.Context, *common.Empty) (*CloseBroadcastResp, error)
	GmCloseBroadcast(context.Context, *RoomIdReq) (*common.Empty, error)
	// 用户
	JoinLiveRoom(context.Context, *JoinLiveRoomReq) (*JoinLiveRoomResp, error)
	QuitLiveRoom(context.Context, *RoomIdReq) (*common.Empty, error)
	ListLiveRooms(context.Context, *ListLiveRoomsReq) (*ListLiveRoomsResp, error)
	SearchAnchor(context.Context, *SearchAnchorReq) (*SearchAnchorResp, error)
	LiveRoomsDetails(context.Context, *LiveRoomsDetailsReq) (*LiveRoomsDetailsResp, error)
	mustEmbedUnimplementedLiveServerServer()
}

// UnimplementedLiveServerServer must be embedded to have forward compatible implementations.
type UnimplementedLiveServerServer struct {
}

func (UnimplementedLiveServerServer) ChatCallBack(context.Context, *ChatCallBackReq) (*ChatCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCallBack not implemented")
}
func (UnimplementedLiveServerServer) CreateChatRooms(context.Context, *CreateChatRoomReq) (*CreateChatRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatRooms not implemented")
}
func (UnimplementedLiveServerServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedLiveServerServer) JoinRoom(context.Context, *JoinRoomReq) (*JoinRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedLiveServerServer) SendGift(context.Context, *SendGiftReq) (*SendGiftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGift not implemented")
}
func (UnimplementedLiveServerServer) SendMess(context.Context, *SendMessReq) (*SendMessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMess not implemented")
}
func (UnimplementedLiveServerServer) ToggleLike(context.Context, *ToggleLikeReq) (*ToggleLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleLike not implemented")
}
func (UnimplementedLiveServerServer) LeaveRoom(context.Context, *LeaveRoomReq) (*LeaveRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedLiveServerServer) FollowUser(context.Context, *FollowUserReq) (*FollowUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedLiveServerServer) FindLiveRoomInfo(context.Context, *common.Empty) (*LiveRoomsDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLiveRoomInfo not implemented")
}
func (UnimplementedLiveServerServer) RoomStartBroadcast(context.Context, *RoomStartBroadcastReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomStartBroadcast not implemented")
}
func (UnimplementedLiveServerServer) RoomListMute(context.Context, *RoomOpListReq) (*RoomOpListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomListMute not implemented")
}
func (UnimplementedLiveServerServer) RoomCreateMute(context.Context, *RoomOpCreateReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCreateMute not implemented")
}
func (UnimplementedLiveServerServer) RoomCancelMute(context.Context, *RoomOpCancelReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCancelMute not implemented")
}
func (UnimplementedLiveServerServer) RoomListKickOut(context.Context, *RoomOpListReq) (*RoomOpListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomListKickOut not implemented")
}
func (UnimplementedLiveServerServer) RoomCreateKickOut(context.Context, *RoomOpCreateReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCreateKickOut not implemented")
}
func (UnimplementedLiveServerServer) RoomCancelKickOut(context.Context, *RoomOpCancelReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCancelKickOut not implemented")
}
func (UnimplementedLiveServerServer) RoomListBlacklist(context.Context, *RoomOpListReq) (*RoomOpListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomListBlacklist not implemented")
}
func (UnimplementedLiveServerServer) RoomCreateBlacklist(context.Context, *RoomOpCreateReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCreateBlacklist not implemented")
}
func (UnimplementedLiveServerServer) RoomCancelBlacklist(context.Context, *RoomOpCancelReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCancelBlacklist not implemented")
}
func (UnimplementedLiveServerServer) RoomCloseBroadcast(context.Context, *common.Empty) (*CloseBroadcastResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCloseBroadcast not implemented")
}
func (UnimplementedLiveServerServer) GmCloseBroadcast(context.Context, *RoomIdReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GmCloseBroadcast not implemented")
}
func (UnimplementedLiveServerServer) JoinLiveRoom(context.Context, *JoinLiveRoomReq) (*JoinLiveRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLiveRoom not implemented")
}
func (UnimplementedLiveServerServer) QuitLiveRoom(context.Context, *RoomIdReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitLiveRoom not implemented")
}
func (UnimplementedLiveServerServer) ListLiveRooms(context.Context, *ListLiveRoomsReq) (*ListLiveRoomsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLiveRooms not implemented")
}
func (UnimplementedLiveServerServer) SearchAnchor(context.Context, *SearchAnchorReq) (*SearchAnchorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAnchor not implemented")
}
func (UnimplementedLiveServerServer) LiveRoomsDetails(context.Context, *LiveRoomsDetailsReq) (*LiveRoomsDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveRoomsDetails not implemented")
}
func (UnimplementedLiveServerServer) mustEmbedUnimplementedLiveServerServer() {}

// UnsafeLiveServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveServerServer will
// result in compilation errors.
type UnsafeLiveServerServer interface {
	mustEmbedUnimplementedLiveServerServer()
}

func RegisterLiveServerServer(s grpc.ServiceRegistrar, srv LiveServerServer) {
	s.RegisterService(&LiveServer_ServiceDesc, srv)
}

func _LiveServer_ChatCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).ChatCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_ChatCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).ChatCallBack(ctx, req.(*ChatCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_CreateChatRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).CreateChatRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_CreateChatRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).CreateChatRooms(ctx, req.(*CreateChatRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).JoinRoom(ctx, req.(*JoinRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_SendGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGiftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).SendGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_SendGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).SendGift(ctx, req.(*SendGiftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_SendMess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).SendMess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_SendMess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).SendMess(ctx, req.(*SendMessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_ToggleLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).ToggleLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_ToggleLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).ToggleLike(ctx, req.(*ToggleLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_LeaveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).LeaveRoom(ctx, req.(*LeaveRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).FollowUser(ctx, req.(*FollowUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_FindLiveRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).FindLiveRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_FindLiveRoomInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).FindLiveRoomInfo(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomStartBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomStartBroadcastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomStartBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomStartBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomStartBroadcast(ctx, req.(*RoomStartBroadcastReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomListMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomOpListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomListMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomListMute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomListMute(ctx, req.(*RoomOpListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomCreateMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomOpCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomCreateMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomCreateMute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomCreateMute(ctx, req.(*RoomOpCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomCancelMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomOpCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomCancelMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomCancelMute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomCancelMute(ctx, req.(*RoomOpCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomListKickOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomOpListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomListKickOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomListKickOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomListKickOut(ctx, req.(*RoomOpListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomCreateKickOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomOpCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomCreateKickOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomCreateKickOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomCreateKickOut(ctx, req.(*RoomOpCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomCancelKickOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomOpCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomCancelKickOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomCancelKickOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomCancelKickOut(ctx, req.(*RoomOpCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomListBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomOpListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomListBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomListBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomListBlacklist(ctx, req.(*RoomOpListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomCreateBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomOpCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomCreateBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomCreateBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomCreateBlacklist(ctx, req.(*RoomOpCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomCancelBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomOpCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomCancelBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomCancelBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomCancelBlacklist(ctx, req.(*RoomOpCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomCloseBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomCloseBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomCloseBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomCloseBroadcast(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_GmCloseBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).GmCloseBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_GmCloseBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).GmCloseBroadcast(ctx, req.(*RoomIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_JoinLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinLiveRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).JoinLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_JoinLiveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).JoinLiveRoom(ctx, req.(*JoinLiveRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_QuitLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).QuitLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_QuitLiveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).QuitLiveRoom(ctx, req.(*RoomIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_ListLiveRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLiveRoomsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).ListLiveRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_ListLiveRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).ListLiveRooms(ctx, req.(*ListLiveRoomsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_SearchAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAnchorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).SearchAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_SearchAnchor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).SearchAnchor(ctx, req.(*SearchAnchorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_LiveRoomsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveRoomsDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).LiveRoomsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_LiveRoomsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).LiveRoomsDetails(ctx, req.(*LiveRoomsDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveServer_ServiceDesc is the grpc.ServiceDesc for LiveServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LiveServer",
	HandlerType: (*LiveServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChatCallBack",
			Handler:    _LiveServer_ChatCallBack_Handler,
		},
		{
			MethodName: "CreateChatRooms",
			Handler:    _LiveServer_CreateChatRooms_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _LiveServer_CreateUser_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _LiveServer_JoinRoom_Handler,
		},
		{
			MethodName: "SendGift",
			Handler:    _LiveServer_SendGift_Handler,
		},
		{
			MethodName: "SendMess",
			Handler:    _LiveServer_SendMess_Handler,
		},
		{
			MethodName: "ToggleLike",
			Handler:    _LiveServer_ToggleLike_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _LiveServer_LeaveRoom_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _LiveServer_FollowUser_Handler,
		},
		{
			MethodName: "FindLiveRoomInfo",
			Handler:    _LiveServer_FindLiveRoomInfo_Handler,
		},
		{
			MethodName: "RoomStartBroadcast",
			Handler:    _LiveServer_RoomStartBroadcast_Handler,
		},
		{
			MethodName: "RoomListMute",
			Handler:    _LiveServer_RoomListMute_Handler,
		},
		{
			MethodName: "RoomCreateMute",
			Handler:    _LiveServer_RoomCreateMute_Handler,
		},
		{
			MethodName: "RoomCancelMute",
			Handler:    _LiveServer_RoomCancelMute_Handler,
		},
		{
			MethodName: "RoomListKickOut",
			Handler:    _LiveServer_RoomListKickOut_Handler,
		},
		{
			MethodName: "RoomCreateKickOut",
			Handler:    _LiveServer_RoomCreateKickOut_Handler,
		},
		{
			MethodName: "RoomCancelKickOut",
			Handler:    _LiveServer_RoomCancelKickOut_Handler,
		},
		{
			MethodName: "RoomListBlacklist",
			Handler:    _LiveServer_RoomListBlacklist_Handler,
		},
		{
			MethodName: "RoomCreateBlacklist",
			Handler:    _LiveServer_RoomCreateBlacklist_Handler,
		},
		{
			MethodName: "RoomCancelBlacklist",
			Handler:    _LiveServer_RoomCancelBlacklist_Handler,
		},
		{
			MethodName: "RoomCloseBroadcast",
			Handler:    _LiveServer_RoomCloseBroadcast_Handler,
		},
		{
			MethodName: "GmCloseBroadcast",
			Handler:    _LiveServer_GmCloseBroadcast_Handler,
		},
		{
			MethodName: "JoinLiveRoom",
			Handler:    _LiveServer_JoinLiveRoom_Handler,
		},
		{
			MethodName: "QuitLiveRoom",
			Handler:    _LiveServer_QuitLiveRoom_Handler,
		},
		{
			MethodName: "ListLiveRooms",
			Handler:    _LiveServer_ListLiveRooms_Handler,
		},
		{
			MethodName: "SearchAnchor",
			Handler:    _LiveServer_SearchAnchor_Handler,
		},
		{
			MethodName: "LiveRoomsDetails",
			Handler:    _LiveServer_LiveRoomsDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "live/live.proto",
}
